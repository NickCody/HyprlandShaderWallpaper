name: CI

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Required for creating releases

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry and target directory
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential pkg-config \
          libwayland-dev wayland-protocols libxkbcommon-dev \
          libegl1-mesa-dev libgles2-mesa-dev \
          coreutils

    - name: Check formatting
      run: cargo fmt --all --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose
      
    - name: Run tests
      run: cargo test --verbose

  build-appimage:
    name: Build AppImage
    runs-on: ubuntu-22.04
    needs: test  # Only run if tests pass
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential pkg-config cmake ninja-build \
          libwayland-dev wayland-protocols libxkbcommon-dev \
          libegl1-mesa-dev libgles2-mesa-dev \
          mesa-vulkan-drivers vulkan-tools libvulkan-dev \
          python3-pip python3-setuptools patchelf desktop-file-utils \
          libfuse2 curl wget zsync

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry and target directory
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-
          ${{ runner.os }}-cargo-

    - name: Install appimage-builder
      run: |
        sudo pip3 install appimage-builder

    - name: Build Rust binary
      run: |
        cargo build --release --locked

    - name: Build AppImage
      run: |
        appimage-builder --recipe AppImageBuilder.yml --skip-test

    - name: List files after build
      run: |
        echo "Files in current directory:"
        ls -la
        echo "Looking for AppImage files:"
        find . -name "*.AppImage" -type f

    - name: Get version for artifact naming
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Rename AppImage with version
      run: |
        if [ -f "WallShader-x86_64.AppImage" ]; then
          mv WallShader-x86_64.AppImage WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
          echo "AppImage renamed successfully"
        else
          echo "ERROR: WallShader-x86_64.AppImage not found!"
          echo "Available files:"
          ls -la
          exit 1
        fi
        ls -la *.AppImage

    - name: Test AppImage
      run: |
        chmod +x WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
        ./WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage --help

    - name: Upload AppImage as artifact
      uses: actions/upload-artifact@v4
      with:
        name: WallShader-AppImage-${{ steps.version.outputs.version }}
        path: WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
        retention-days: 30
        if-no-files-found: error

    - name: Delete existing release if it exists
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const tag = process.env.TAG;
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });
            core.info(`Deleting existing release ${release.data.id} for tag ${tag}`);
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id
            });
          } catch (error) {
            if (error.status === 404) {
              core.info(`No existing release found for tag ${tag}`);
            } else {
              throw error;
            }
          }
      env:
        TAG: ${{ steps.version.outputs.version }}

    - name: Release AppImage
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
        generate_release_notes: true
        fail_on_unmatched_files: true
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
