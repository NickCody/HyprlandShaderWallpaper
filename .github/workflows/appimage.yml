name: Build AppImage

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-appimage:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential pkg-config cmake ninja-build \
          libwayland-dev wayland-protocols libxkbcommon-dev \
          libegl1-mesa-dev libgles2-mesa-dev \
          mesa-vulkan-drivers vulkan-tools libvulkan-dev \
          python3-pip python3-setuptools patchelf desktop-file-utils \
          libfuse2 curl wget zsync

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry and target directory
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-appimage-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-appimage-cargo-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-appimage-cargo-
          ${{ runner.os }}-cargo-

    - name: Cache system dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.cache/pip
        key: ${{ runner.os }}-deps-${{ hashFiles('.github/workflows/appimage.yml') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install appimage-builder
      run: |
        sudo pip3 install appimage-builder

    - name: Validate Rust formatting and linting
      run: |
        cargo fmt --all --check
        cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --workspace

    - name: Clean target directory to save cache space
      run: |
        # Keep only the most recent build artifacts to prevent cache bloat
        cargo clean -p wallshader --release
        find target -name "*.rlib" -mtime +7 -delete || true
        find target -name "deps" -type d -exec find {} -name "*.rlib" -mtime +7 -delete \; || true

    - name: Build AppImage
      run: |
        appimage-builder --recipe AppImageBuilder.yml --skip-test

    - name: List files after build
      run: |
        echo "Files in current directory:"
        ls -la
        echo "Looking for AppImage files:"
        find . -name "*.AppImage" -type f

    - name: Get version for artifact naming
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Rename AppImage with version
      run: |
        if [ -f "WallShader-x86_64.AppImage" ]; then
          mv WallShader-x86_64.AppImage WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
          echo "AppImage renamed successfully"
        else
          echo "ERROR: WallShader-x86_64.AppImage not found!"
          echo "Available files:"
          ls -la
          exit 1
        fi
        ls -la *.AppImage

    - name: Test AppImage
      run: |
        chmod +x WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
        ./WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage --help

    - name: Upload AppImage as artifact
      uses: actions/upload-artifact@v4
      with:
        name: WallShader-AppImage-${{ steps.version.outputs.version }}
        path: WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
        retention-days: 30
        if-no-files-found: error

    - name: Release AppImage
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: WallShader-${{ steps.version.outputs.version }}-x86_64.AppImage
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}